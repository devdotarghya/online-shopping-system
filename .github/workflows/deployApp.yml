name: AWS EKS CICD
on:
  push:
    branches: [master]
#env:
#  tableName: 'weather'
#  lambdaFunctionName: 'weather-lambda'
#  jarFileName: 'weatherapi-0.0.1-SNAPSHOT.jar'
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        id: checkout
        uses: actions/checkout@v3
      - name: Setup Java
        id: java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Project
        id: build
        run: mvn clean compile jib:build
      - name: Configure AWS Credentials
        id: awsConfig
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install kubectl
        id: installKubeCtl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0' # default is latest stable
      - name: Install eksctl
        id: installEksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - name: Verify eksctl
        id: verifyEksctl
        run: eksctl version
      - name: Create cluster
        id: createCluster
        run: eksctl create cluster --name online-shopping-cluster-1 --region us-east-1
        continue-on-error: true
      - name: Update K8 config
        id: updateKubeConfig
        run: aws eks update-kubeconfig --name online-shopping-cluster-1 --region us-east-1
      - name: Deploy application
        id: deploy
        run: |
#          kubectl apply -f ./K8/infrastructure/mongodb/mongo-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/postgres-order/postgres-order-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/postgres-inventory/postgres-inventory-deployment.yaml
          kubectl apply -f ./K8/infrastructure/keycloak-mysql/keycloak-mysql-deployment.yaml
          kubectl apply -f ./K8/infrastructure/keycloak/keycloak-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/zipkin/zipkin-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/zookeeper/zookeeper-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/kafka/broker-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/discovery-server/service-discovery-server-deployment.yaml
#          kubectl apply -f ./K8/infrastructure/api-gateway/api-gateway-deployment.yaml
#          kubectl apply -f ./K8/services/product-service/product-service-deployment.yaml
#          kubectl apply -f ./K8/services/order-service/order-service-deployment.yaml
#          kubectl apply -f ./K8/services/inventory-service/inventory-service-deployment.yaml
#          kubectl apply -f ./K8/services/notification-service/notification-service-deployment.yaml